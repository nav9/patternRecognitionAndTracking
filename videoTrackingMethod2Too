clc;clear all;close all;

classifier = 1;%1 for SVM, 2 for NaiveBayes
spr=2;spc=5;spi=1;%subplot vars
iLoc='E:\Module6_PatternRecognitionAndMachineLearning\assignment\dataset\partc\imgs';
fileExtent = csvread(strcat(iLoc,'\girl_frames.txt'));
gt = csvread(strcat(iLoc,'\girl_gt.txt')); gtO = gt; gt = gt(1, :);
maxFiles = fileExtent(2);%number of files are already stored in girl_gt.txt
if maxFiles>9, maxFiles=9;end
SStore = []; FF =[]; 
RF =[];%reduced features of ground truth
trainedModel = [];
eW = 2; eH = eW;%offset by these many pixels
incr = 5;%patch increment
scanArea = 60;%search for next ground truth in rectangle this wide on all sides
gtR =[]; gtC=[]; gtW=[]; gtH=[]; calGT = []; err = [];
isGT = 1; notGT = 0;
figure(1);

% %---METHOD2
% %---iterate all files
% GH = []; BH = []; G = []; FF = [];
% for n = fileExtent(1):maxFiles
%     gtR = gtO(n+1,2); gtC = gtO(n+1,1); gtW = gtO(n+1,3); gtH = gtO(n+1,4);%ground truth positions
%     if n<10, imgNum=strcat('00',num2str(n)); else if n>9 && n<100, imgNum=strcat('0',num2str(n)); else imgNum=num2str(n);end;end
%     filename = strcat(iLoc,'\img00',imgNum,'.png');
%     ITC = double(rgb2gray(imread(filename))); 
%     IC = double(imcrop(ITC, gtO(n+1,:)));[iHt, iWd] = size(IC);%cropped image of ground truth
%     imshow(uint8(IC))
%     if n==fileExtent(1),%if first frame
%         III = ITC; III(gtR:gtR+gtH, gtC:gtC+gtW) = 0;%black out ground truth area. This will be used for training the background
%             for i = 1:incr:size(ITC,1)-iHt,%get background for classification
%                 for j = 1:incr:size(ITC,2)-iWd,
%                     BB = ITC(i:i+iHt-1, j:j+iWd-1);%take a patch
%                     BB = HOG(BB);
%                     BH = [BH BB'];
%                 end
%             end
%     end
%     
%     IC = HOG(IC);
%     GH = [GH IC'];%img_pix x N
% end
% [eigVG, proj] = myPCA(GH);%eigV 6480x10. GH 6480x10
% eigG = GH' * eigVG; %reduced features 10x10. Columns will identify ground truth
% [eigVB, proj] = myPCA(BH);%eigV 6480x989. BH 6480x989
% eigB = BH' * eigVB; %reduced features 10x10. Columns will identify background
% 
% %---Train
% numPrin = 10;%principal components to consider
% rGH = GH * eigG(:,1:numPrin); 
% rBH = BH * eigB(:,1:numPrin);
% G = [isGT*ones(size(rGH,1),1); notGT*ones(size(rBH,1),1)];
% FF = [rGH; rBH];
% if classifier == 1, trainedModel = svmtrain(FF, G);end
% if classifier == 2, trainedModel = NaiveBayes.fit(FF, G);end
% %---Test
% err=[];
% for n = fileExtent(1):maxFiles
%     FF = [];%re-using for storing distance measure
%     gtR = gtO(n+1,2); gtC = gtO(n+1,1); gtW = gtO(n+1,3); gtH = gtO(n+1,4);%ground truth positions
%     if n<10, imgNum=strcat('00',num2str(n)); else if n>9 && n<100, imgNum=strcat('0',num2str(n)); else imgNum=num2str(n);end;end
%     filename = strcat(iLoc,'\img00',imgNum,'.png');
%     II = double(rgb2gray(imread(filename)));
%     stR = gtR-scanArea; enR = gtR+gtH+scanArea;
%     stC = gtC-scanArea; enC = gtC+gtW+scanArea;    
%     if n == fileExtent(1), ITC = II;%if first image       
%     else
%         %border check
%         if stR<1, stR=1;end; if stC<1, stC=1;end
%         if enR>size(II,1), enR=size(II,1);end; if enC>size(II,2), enC=size(II,2);end; 
%         ITC = II(stR:enR, stC:enC);%image section within which to search for face        
%     end
% 
%     for i = 1:incr:size(ITC,1)-iHt,
%         for j = 1:incr:size(ITC,2)-iWd,
%             IM = ITC(i:i+iHt-1, j:j+iWd-1);%take a patch                
%             ho = HOG(IM);%get its HOG
%             GHH = ho * eigVG;%project to reduce features. Searching for face 
%             %BHH = ho * eigVB;%project to reduce features 
%             if classifier == 1, classifResult = svmclassify(trainedModel, GHH);end
%             if classifier == 2, classifResult = trainedModel.predict(GHH);end
%             if n==fileExtent(1), prevGHH = GHH;end
%             if classifResult == isGT,
%                 simi = pdist2(prevGHH, GHH, 'cosine');
%                 FF = [FF; [i j simi]];
%                 gtFound = 1;
%                 rectangle('Position', [stC+j stR+i gtW gtH],'LineStyle','--');hold on;fprintf('.');
%             end            
%             
%         end
%     end
% 	[v, ind] = min(FF(:, 3));
% 	newGtR = FF(ind, 1) + stR;
% 	newGtC = FF(ind, 2) + stC;
% 	gt(1) = newGtC; gt(2) = newGtR;
% 	err = [err sqrt((gt(1)-gtO(n+1,1)).^2+(gt(2)-gtO(n+1,2)).^2)]; %#ok<*SAGROW>    
%     %---display
%     subplot(spr,spc,spi);spi=spi+1;imshow(uint8(II));title(strcat('Frame',num2str(n+1)));
%     rectangle('Position', gt, 'LineWidth',2);hold on;%ground truth
%     if n ~= fileExtent(1),rectangle('Position', [stC stR enC-stC enR-stR],'LineStyle',':');hold on;end
%     fprintf('frame %d\n',n);  
%     prevGHH = GHH;
% end


%---METHOD1
%---iterate all files
err = [];
for n = fileExtent(1):maxFiles
    if n<10, imgNum=strcat('00',num2str(n)); else if n>9 && n<100, imgNum=strcat('0',num2str(n)); else imgNum=num2str(n);end;end
    filename = strcat(iLoc,'\img00',imgNum,'.png');
    II = double(rgb2gray(imread(filename)));
    
    if n ~= fileExtent(1)+1,%if not the second image
        gtR = gt(2); gtC = gt(1); gtW = gt(3); gtH = gt(4);%ground truth positions

        IC = double(imcrop(II, gt));%cropped image
        [iHt, iWd] = size(IC);    
        
        %---HOG
        GHH = HOG(IC);%HOG of ground truth. 81x1
        GHH1 = HOG(double(imcrop(II, [gtC-eW gtR gtW gtH])));
        GHH2 = HOG(double(imcrop(II, [gtC+eW gtR gtW gtH])));
        GHH3 = HOG(double(imcrop(II, [gtC gtR-eH gtW gtH])));
        GHH4 = HOG(double(imcrop(II, [gtC gtR+eH gtW gtH])));
        GH = [GHH; GHH1; GHH2; GHH3; GHH4];%taking features of nearby patches too
        %---PCA
        [eigV, proj] = myPCA(GH');  
        RF = GH * eigV; %reduced features
    end
    
    if n == fileExtent(1), %if first image       
        FF = RF;
        G = isGT * ones(size(FF,1), 1);%group
        ITC = II;
    end
    
    if n > fileExtent(1), %if not first image
        stR = gtR-scanArea; enR = gtR+gtH+scanArea;
        stC = gtC-scanArea; enC = gtC+gtW+scanArea;
        %border check
        if stR<1, stR=1;end; if stC<1, stC=1;end
        if enR>size(II,1), enR=size(II,1);end; if enC>size(II,2), enC=size(II,2);end; 
        ITC = II(stR:enR, stC:enC);%image section within which to search for face
        FF=[];G=[];
    end
%     figure(1);imshow(uint8(II));rectangle('Position', gt);hold on;
    
    gtFound = 0;
    %---iterate the image and get patches
    for i = 1:incr:size(ITC,1)-iHt,
        for j = 1:incr:size(ITC,2)-iWd,
            if n == fileExtent(1) && (i>=gtR && i<=gtR+eH && j>=gtC && j<=gtC+2*eW) || (i>=gtR-eH && i<=gtR && j>=gtC && j<=gtC+eW),
                %avoid the patch of ground truth
            else
                IM = ITC(i:i+iHt-1, j:j+iWd-1);%take a patch                
                ho = HOG(IM);%get its HOG
                BH = ho * eigV;%project to reduce features
                
                if n == fileExtent(1), %if first image
                    FF = [FF; BH]; G = [G; notGT];%store
                else
                    if classifier == 1, classifResult = svmclassify(trainedModel, BH);end
                    if classifier == 2, classifResult = trainedModel.predict(BH);end
                    if classifResult == isGT,
                        simi = pdist2(RF(1,:), BH, 'cosine');
                        FF = [FF; [i j simi]];
                        gtFound = 1;
                        rectangle('Position', [stC+j stR+i gtW gtH],'LineStyle','--');hold on;
                        fprintf('.');
                    end
                end

            end
        end
    end
    fprintf('\n');
    
    if n == fileExtent(1), %if first image
        if classifier == 1, trainedModel = svmtrain(FF, G);end
        if classifier == 2, trainedModel = NaiveBayes.fit(FF, G);end
    else
        if gtFound==0, fprintf('Ground truth could not be found at iteration %d\n',n);break;
        else
            [v, ind] = min(FF(:, 3));
            newGtR = FF(ind, 1) + stR; newGtC = FF(ind, 2) + stC;
            gt(1) = newGtC; gt(2) = newGtR;
            err(n) = sqrt((gt(1)-gtO(n,1)).^2+(gt(2)-gtO(n,2)).^2); %#ok<*SAGROW>
        end
    end  
    
    %---display
    subplot(spr,spc,spi);spi=spi+1;imshow(uint8(II));title(strcat('Frame',num2str(n+1)));
    rectangle('Position', gt, 'LineWidth',2);hold on;%ground truth
    if n ~= fileExtent(1),rectangle('Position', [stC stR enC-stC enR-stR],'LineStyle',':');hold on;end
    fprintf('frame %d\n',n);
    %pause(0.1);
end
disp('errors');disp(err);



    %Extract HOG feature with extractHOGFeatures(I);
    %features extracted from the bounding box is categorized 1 and
    %background of same bounding box size is categorized 0.
    %Then SVM classifies
    %Training = 
    %SVMStruct = svmtrain(Training,Group);
    %you'll get many false positives. now use cosine similarity to get the
    %one with max similarity.
    %cvpr iccv eccv conference
    %cvpr2018.thecvf.com/jobs/
    %in google metrics type conputer vision
    %https://scholar.google.com/citations?hl=en&view_op=search_venues&vq=Cp,[iter+vosopm
